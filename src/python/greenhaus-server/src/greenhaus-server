#!/usr/bin/env python

import logging
import redis
import signal
import pyev

def on_signal(watcher, revents):
    print("got SIGINT")
    loop = watcher.loop
    # optional - stop all watchers
    if loop.data:
        print("stopping watchers: {0}".format(loop.data))
        while loop.data:
            loop.data.pop().stop()
    # unloop all nested loop
    print("stopping the loop: {0}".format(loop))
    loop.stop(pyev.EVBREAK_ALL)

class Server:
    def __init__(self, loop):
        self.loop = loop
        timer = loop.timer(0, 2, self.on_timer, 0)
        timer.start()
        loop.data.append(timer)

        self.r = redis.Redis()

        self.r.setnx('status', 0)
        self.status = int(self.r.get('status'))

    def on_timer(self, watcher, revents):
        watcher.data += 1
        print("timer.data: {0}".format(watcher.data))
        print("timer.loop.iteration: {0}".format(watcher.loop.iteration))
        print("timer.loop.now(): {0}".format(watcher.loop.now()))
        self.UpdateStatus();

    def UpdateStatus(self):
        self.status += 1
        self.r.set('status', self.status)


class Heatmat:
    def __init__(self, rds, name):
        self.rds = rds
        self.type = 'heatmat'
        self.name = name
        self.status = 'OFF'

    def report(self):
        self.rds.set('{}:{}:status'.format(self.type, self.name), [self.status])


class Light:
    def __init__(self, rds, name):
        self.rds = rds
        self.type = 'light'
        self.name = name
        self.status = 'OFF'

    def report(self):
        self.rds.set('{}:{}:status'.format(self.type, self.name), [self.status])


class Thermometer:
    def __init__(self, rds, name):
        self.rds = rds
        self.type = 'thermometer'
        self.name = name
        self.temperature = 0.0

    def report(self):
        self.rds.set('{}:{}'.format(self.type, self.name), self.temperature)


if __name__ == "__main__":
    loop = pyev.default_loop()
    loop.data = list()
    
    server = Server(loop)

    # initialise and start a Signal watcher
    sig = loop.signal(signal.SIGINT, on_signal)
    sig.start()
    loop.data.append(sig)

    # now wait for events to arrive
    loop.start()
